/* globals describe, it, expect, beforeAll, beforeEach, afterEach */

const zapier = require('zapier-platform-core');
const nock = require('nock');

zapier.tools.env.inject();

const App = require('../index');
const appTester = zapier.createAppTester(App);

// Only here so the tests out of the box.
// You should create a `.env` file and populate it with the necessarily configuration
// it should look like:
/*
    CLIENT_ID=1234
    CLIENT_SECRET=asdf
*/
// then you can delete the following 2 lines
process.env.CLIENT_ID = process.env.CLIENT_ID || '1234';
process.env.CLIENT_SECRET = process.env.CLIENT_SECRET || 'asdf';

describe('session auth app', () => {
  beforeAll(() => {
    // It's a good idea to store your Client ID and Secret in the environment rather than in code.
    if (!(process.env.CLIENT_ID && process.env.CLIENT_SECRET)) {
      throw new Error(
        `Before running the tests, make sure CLIENT_ID and CLIENT_SECRET are available in the environment.`
      );
    }
  });

  afterEach(() => {
    nock.cleanAll();
  });

  it('performs session authentication', async () => {
    const authBundle = {
      // In production, these will be generated by Zapier and set automatically
      authData: {
        "username": "testemail",
        "password": "testpassword",
        "domain": "testsubdomain.skedda.com"
      },
      environment: {
      },
    };

    const result = await appTester(
      App.authentication.sessionConfig.perform,
      authBundle
    );
    expect(result.domain).toBeDefined();
    expect(result.headers).toBeDefined();
    const bundle = {
      bookingId: "97375695",
      paymentStatus: 1,
    }
    const bookinsResult = await appTester(
      App.creates.booking.operation.perform,
      authBundle
    );
  });
});
